require "fileutils"

VERSION = File.open( "../package.json" ) { | f | JSON.parse( f.read )["version"] }
EDITOR = ENV["EDITOR"] || `git config core.editor`.strip || "nano"
XCODEPROJ = "ios/FastlaneTest.xcodeproj"

default_platform(:android)

platform :android do
  desc "Description of what the lane does"
  lane :custom_lane do
    # add actions here: https://docs.fastlane.tools/actions
  end
end

def set_android_version_code( new_version_code )
  build_gradle_path = "../android/app/build.gradle"
  new_gradle = File.read( build_gradle_path ).sub( /versionCode\s+\d+/, "versionCode #{new_version_code}" )
  File.open( build_gradle_path, "w" ) { | f | f.write( new_gradle ) }
end

def set_android_version_name( new_version_name )
  build_gradle_path = "../android/app/build.gradle"
  new_gradle = File.read( build_gradle_path ).sub( /versionName\s+".+"/, "versionName \"#{VERSION}\"" )
  File.open( build_gradle_path, "w" ) { | f | f.write( new_gradle ) }
end

lane :tag do
  desc "Add a new tag with an incremented version"
  ensure_git_status_clean
  last_tag = last_git_tag
  # Increment the iOS build number
  increment_build_number( xcodeproj: XCODEPROJ )
  build_number = get_build_number( xcodeproj: XCODEPROJ )
  # set android/app/build.gradle versionCode to this build_number
  set_android_version_code( build_number )
  # set android/app/build.gradle versionName to VERSION
  set_android_version_name( VERSION )
  tag = "v#{VERSION}+#{build_number}"

  changes = changelog_from_git_commits( pretty: "# * %h %s (%an, %ai)" )
  if last_tag && changes.empty?
    UI.abort_with_message! "Nothing has changed since the last tag (#{last_tag})"
  end
  
  # Get release notes
  # Bit silly but takes advantage of existing syntax highlighting
  fname = "COMMIT_EDITMSG"
  File.open( fname, "w" ) do | f |
    f << <<~INSTRUCTIONS


      # Enter notes about what's new in #{tag}. Lines beginning with # will be ignored.
      #
      # Here's what changed since the last tag:
      #{changes}
    INSTRUCTIONS
  end
  system "#{EDITOR} #{fname}", exception: true
  release_notes = ""
  File.readlines( fname ).each do | line |
    puts "Line: #{line}"
    release_notes += line unless line[0] == "#"
  end
  release_notes.strip!
  puts "release_notes: #{release_notes}"
  FileUtils.rm( fname )
  if release_notes.strip.size == 0
    reset_git_repo
    UI.abort_with_message! "You gotta enter release notes!"
  end

  # TODO write release notes to a place where they can be translated and add that file to git
  changelog_dir_path = File.join( "metadata", "android", "en-US", "changelogs" )
  FileUtils.mkpath( changelog_dir_path )
  changelog_path = File.join( changelog_dir_path, "#{build_number}.txt" )
  File.open( changelog_path, "w" ) do | f |
    f << "#{release_notes}\n"
  end
  changelog_git_path = File.join( "fastlane", changelog_path )
  git_add( path: changelog_git_path )

  # commit
  commit_version_bump( message: tag, xcodeproj: XCODEPROJ, include: [
    "android/app/build.gradle",
    changelog_git_path
  ] )
  push_to_git_remote

  # Create a tag for this release
  add_git_tag( tag: tag )
  push_git_tags

  # up until here everything applies to both platforms, so maybe that's it's
  # own lane? can you call lanes from other lanes? maybe you could actually
  # make the github release here and then adding the android apk or whatever
  # could be a restricted to android-specific stuff

  # TODO Build an APK for Android

  # TODO make a github release for the tag with the release notes and add the APK as an attachment

  # TODO Build an AAB for Android
  # TODO Upload to play store in internal track
end

lane :release do
  desc "Make github release for the latest tag and make builds"
end

lane :beta do
  desc "Push builds for the latest tag to test tracks"
end

lane :prod do
  desc "Push builds for the latest tag to production"
end
